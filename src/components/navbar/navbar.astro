---
import Button from "@components/ui/button.astro";
import Link from "@components/ui/link.astro";
import LanguageSelector from "@components/languageselector.astro";

// Add new built-in i18n imports
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import { getRelativeLocaleUrl } from "astro:i18n";
import { Icon } from "astro-icon/components";

// Get current language and create translation function
const safeUrl = Astro.url || new URL('/', Astro.site || 'http://localhost:4321');
const lang = getLangFromUrl(safeUrl);
const t = useTranslations(lang);

// Helper function to create localized paths
function localizePath(path: string) {
	if (!path || (path && path.startsWith('http')) || path === '#') return path;
	return getRelativeLocaleUrl(lang, path);
}

export const menuitems = [
  {
    titleKey: "header.blog_link",
    title: "How to Save TikTok Videos", // Fallback text
    path: "/blog/how-to-save-tiktok-videos-without-watermark",
    ariaLabel: "Learn how to save TikTok videos without watermark"
  },
  {
    titleKey: "header.nav_1",
    title: "TikTok Downloader", // Fallback text
    path: "/tiktok-downloader",
    ariaLabel: "TikTok video downloader tool"
  },
  {
    titleKey: "header.nav_2", 
    title: "Download TikTok Video", // Fallback text
    path: "/download-tiktok-video",
    ariaLabel: "Download TikTok videos online"
  },
  {
    titleKey: "header.nav_3",
    title: "TikTok Video Downloader", // Fallback text
    path: "/tiktok-video-downloader",
    ariaLabel: "TikTok video downloader without watermark"
  },
];

// Helper function to get link text with fallback
function getLinkText(item) {
  const translatedText = item.titleKey ? t(item.titleKey) : '';
  // Use translation if available and not empty, otherwise use fallback
  return translatedText && translatedText !== item.titleKey ? translatedText : item.title;
}
---

<div
  x-data="{open: window.innerWidth < 768 ? false : true}"
  class="flex flex-col max-w-screen-xl px-4 mx-auto md:items-center md:justify-between md:flex-row md:px-6 lg:px-8 z-10 md:pt-2 relative"
>
  <div class="p-4 flex flex-row items-center justify-between">
    <a
      href={localizePath("/")}
      class="flex items-center text-2xl font-bold tracking-widest text-gray-900 rounded-lg dark:text-white focus:outline-none focus:shadow-outline"
      aria-label="SSSTIKTOK Homepage - TikTok Video Downloader"
    >
      <Icon name="logosmall" width={30} class="dark:invert" />
      SSSTIKTOK
    </a>
    <div class="flex-grow md:hidden"></div>

    <button
      class="md:hidden text-gray-500 w-10 h-10 relative focus:outline-none"
      @click="open = !open"
      aria-label="Toggle navigation menu"
      aria-expanded="false"
      x-bind:aria-expanded="open.toString()"
    >
      <span class="sr-only">Open main menu</span>
      <div
        class="block w-5 absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2"
      >
        <span
          aria-hidden="true"
          class="block absolute h-0.5 w-5 bg-current transform transition duration-200 ease-in-out"
          :class="{'rotate-45': open,' -translate-y-1.5': !open }"
        >
        </span>
        <span
          aria-hidden="true"
          class="block absolute h-0.5 w-5 bg-current transform transition duration-200 ease-in-out"
          :class="{'opacity-0': open } "
        >
        </span>
        <span
          aria-hidden="true"
          class="block absolute h-0.5 w-5 bg-current transform transition duration-200 ease-in-out"
          :class="{'-rotate-45': open, ' translate-y-1.5': !open}"
        >
        </span>
      </div>
    </button>
  </div>
  <nav
    :class="{'flex': open, 'hidden': !open}"
    x-show="open"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 transform scale-90"
    x-transition:enter-end="opacity-100 transform scale-100"
    x-transition:leave="transition ease-in duration-200"
    x-transition:leave-start="opacity-100 transform scale-100"
    x-transition:leave-end="opacity-0 transform scale-90"
    class="md:mt-0 lg:pl-8 md:items-center flex-grow pb-4 md:pb-0 flex-col gap-2 transition-all ease-out md:transition-none md:justify-center md:flex-row hidden"
    role="navigation"
    aria-label="Main navigation"
  >
    <div
      class="flex flex-col flex-grow text-center gap-2 md:justify-center md:items-center md:flex md:flex-row md:mx-auto"
    >
      {
        menuitems.map((item) =>
          item.children && item.children.length ? (
            <div
              x-on:click.away="open = false"
              class="relative"
              x-data="{ open: false }"
            >
              <Button
                x-on:click="open = !open"
                style="link"
                size="sm"
                class="mt-[2px]"
                aria-label={item.ariaLabel || getLinkText(item)}
                aria-haspopup="true"
                x-bind:aria-expanded="open.toString()"
              >
                {getLinkText(item)}
                <svg
                  fill="currentColor"
                  viewBox="0 0 20 20"
                  x-bind:class="{'rotate-180': open, 'rotate-0': !open}"
                  class="inline w-4 h-4 mb-[2px] transition-transform duration-200 transform"
                  aria-hidden="true"
                >
                  <path
                    fill-rule="evenodd"
                    d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                    clip-rule="evenodd"
                  />
                </svg>
              </Button>
              <div
                x-show="open"
                x-transition:enter="transition ease-out duration-100"
                x-transition:enter-start="transform opacity-0 scale-95"
                x-transition:enter-end="transform opacity-100 scale-100"
                x-transition:leave="transition ease-in duration-75"
                x-transition:leave-start="transform opacity-100 scale-100"
                x-transition:leave-end="transform opacity-0 scale-95"
                class="absolute mt-2 bg-white right-0 w-full origin-top-right rounded-md md:w-48 outline-2 border border-gray-300"
                role="menu"
                aria-orientation="vertical"
              >
                <div class="px-2 py-2 rounded-md shadow dark:bg-gray-800">
                  {item.children.map((subitem) => (
                    <Link
                      href={localizePath(subitem.path)}
                      style="hover"
                      size="sm"
                      class="block"
                      role="menuitem"
                      aria-label={subitem.ariaLabel || (subitem.titleKey ? t(subitem.titleKey) : subitem.title)}
                      x-data="{ isActive: false }"
                      x-init={`() => {
												const path = $el.getAttribute('data-path');
												const checkSubPath = () => {
													isActive = window.location.pathname === path ||
																window.location.pathname === path + '/' ||
																window.location.pathname === '/it' + path ||
																window.location.pathname === '/it' + path + '/';
												};
												document.removeEventListener('astro:page-load', checkSubPath);
												document.addEventListener('astro:page-load', checkSubPath);
											}`}
                      x-bind:class="{ 'dark:bg-gray-600': isActive }"
                      data-path={subitem.path}
                    >
                      {subitem.titleKey ? t(subitem.titleKey) : subitem.title}
                    </Link>
                  ))}
                </div>
              </div>
            </div>
          ) : (
            <Link
              href={localizePath(item.path)}
              style="hover"
              size="sm"
              aria-label={item.ariaLabel || getLinkText(item)}
              x-data="{ isActive: false }"
              x-init={`() => {
								const path = $el.getAttribute('data-path');
								const checkPath = () => {
									isActive = window.location.pathname === path ||
												window.location.pathname === path + '/' ||
												window.location.pathname === '/it' + path ||
												window.location.pathname === '/it' + path + '/';
								};
								document.removeEventListener('astro:page-load', checkPath);
								document.addEventListener('astro:page-load', checkPath);
							}`}
              x-bind:class="{ 'dark:bg-gray-600': isActive }"
              data-path={item.path}
            >
              {getLinkText(item)}
            </Link>
          )
        )
      }
    </div>
  </nav>
</div>
