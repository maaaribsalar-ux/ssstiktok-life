---
import { ViewTransitions } from "astro:transitions";
import Footer from "@components/footer.astro";
import Navbar from "@components/navbar/navbar.astro";
import "@fontsource-variable/inter";
import "./index.css";

// Add new built-in i18n imports
import { getLangFromUrl, useTranslations } from "../i18n/utils";
import { languages } from "../i18n/ui";
import { getAbsoluteLocaleUrl } from "astro:i18n";
import { SEO } from "astro-seo";

export interface Props {
	title?: string;
	description?: string;  // New prop for meta/OG/Twitter description
	lang?: string;
}

// Create safe URL object to prevent undefined errors during build
const safeUrl = Astro.url || new URL('/', Astro.site || 'http://localhost:4321');

// Get current language and translations - using safe URL
const currentLang = getLangFromUrl(safeUrl);
const t = useTranslations(currentLang);

// Use provided lang or detect from URL
const pageLang = Astro.props.lang || currentLang;

const canonicalURL = new URL(safeUrl.pathname || '/', Astro.site).toString();
const resolvedImageWithDomain = new URL(
	"/meta/opengraph.webp",
	Astro.site,
).toString();

const { title, description } = Astro.props;
const makeTitle = title
	? `${title} | SssTiktok`
	: "SssTiktok - TikTok Downloader download video tiktok Mp4 Free";

// Fallback description (use prop if provided)
const pageDescription = description || "Ssstiktok is tiktok downloader to download video tiktok. Ssstik, tiktok video downloader to tiktok video download without watermark and download sound tiktok.";

// Simplified and safe hreflang generation
function generateHrefLangs() {
	// Skip hreflang generation during static build to avoid errors
	if (!safeUrl) {
		return [];
	}
	
	try {
		const baseUrl = Astro.site?.toString() || 'https://ssstiktok-life-eight.vercel.app';
		
		// Generate simple hreflang links
		return Object.keys(languages).map(lang => {
			let href;
			if (lang === 'en') {
				href = baseUrl;
			} else {
				href = `${baseUrl}${lang}/`;
			}
			return { lang, href };
		});
	} catch (error) {
		// Return empty array if any error occurs during build
		return [];
	}
}

const hrefLangs = generateHrefLangs();
---

<!doctype html>
<html lang={pageLang}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />
		<meta name="theme-color" content="#ffffff" />
		
		<!-- Critical CSS - inline to prevent render blocking -->
		<style>
			/* Reset and base styles */
			*,*::before,*::after{box-sizing:border-box}
			body{margin:0;font-family:'Inter Variable',system-ui,sans-serif;line-height:1.6}
			
			/* Dark mode */
			.dark\:bg-stone-950{background-color:rgb(12 10 9)}
			
			/* Layout */
			.relative{position:relative}
			.max-w-6xl{max-width:72rem}
			.max-w-7xl{max-width:80rem}
			.mx-auto{margin-left:auto;margin-right:auto}
			.text-center{text-align:center}
			.flex{display:flex}
			.items-center{align-items:center}
			.justify-center{justify-content:center}
			
			/* Typography */
			.text-2xl{font-size:1.5rem;line-height:2rem}
			.text-4xl{font-size:2.25rem;line-height:2.5rem}
			.font-bold{font-weight:700}
			.text-white{color:rgb(255 255 255)}
			.text-black{color:rgb(0 0 0)}
			
			/* Gradients */
			.bg-gradient-to-r{background-image:linear-gradient(to right,var(--tw-gradient-stops))}
			.from-\[#5940f1\]{--tw-gradient-from:#5940f1;--tw-gradient-to:rgb(89 64 241 / 0);--tw-gradient-stops:var(--tw-gradient-from),var(--tw-gradient-to)}
			.to-\[#ce00ff\]{--tw-gradient-to:#ce00ff}
			
			/* Spacing */
			.p-4{padding:1rem}
			.pt-14{padding-top:3.5rem}
			.mt-2{margin-top:0.5rem}
			.mt-8{margin-top:2rem}
			
			/* Forms */
			.w-full{width:100%}
			.h-14{height:3.5rem}
			.rounded-xl{border-radius:0.75rem}
			.px-5{padding-left:1.25rem;padding-right:1.25rem}
			
			/* Responsive */
			@media (min-width:640px){
				.sm\:text-4xl{font-size:2.25rem;line-height:2.5rem}
				.sm\:pt-10{padding-top:2.5rem}
			}
			
			/* Performance optimizations */
			img{content-visibility:auto;height:auto;max-width:100%}
			header{position:relative}
		</style>
		
		<!-- Resource hints for performance -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		
		<!-- Generate hreflang links manually -->
		{hrefLangs.map(({ lang, href }) => (
			<link rel="alternate" hreflang={lang} href={href} />
		))}
		
		<ViewTransitions />
		
		<!-- SEO -->
		<SEO
			title={makeTitle}
			description={pageDescription}
			canonical={canonicalURL}
			openGraph={{
				basic: {
					url: canonicalURL,
					type: "website",
					title: makeTitle,  // Use dynamic title
					description: pageDescription,  // Use dynamic description
					image: resolvedImageWithDomain,
				},
				image: {
					alt: title || "SssTiktok - TikTok Downloader",  // Dynamic alt
				},
			}}
		/>
		
		<!-- Twitter Card -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={makeTitle} />
		<meta name="twitter:description" content={pageDescription} />
		<meta name="twitter:image" content={resolvedImageWithDomain} />
		<meta name="twitter:site" content="@YourTwitterHandle" />
		<meta name="twitter:creator" content="@tiktokio_cam" />
		
		
		
		<!-- PWA Script -->
		<script src="/src/pwa.ts"></script>
		
		<!-- Optimize script loading -->
		<script is:inline>
			// Preload critical scripts
			const preloadScript = (href) => {
				const link = document.createElement('link');
				link.rel = 'preload';
				link.as = 'script';
				link.href = href;
				document.head.appendChild(link);
			};
	
		</script>
	</head>
	<body class="bg-gray-50">
		<header class="relative">
			<Navbar />
		</header>
		<main>
			<slot />
		</main>
		<Footer />
	</body>
</html>
